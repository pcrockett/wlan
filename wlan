#!/usr/bin/env bash
set -Eeuo pipefail

show_usage() {
    echo "Connect to wireless networks with minimal keystrokes.

Usage:
    $(basename "${0}") [command] [options] [-- initial query]

Available Commands:
    c[onnect]        Connect to a network (default)
    d[isconnect]     Disconnect from a network

Available Options:
    -r, --rescan     Force network rescan
    -h, --help       Show this message
"
}

ARG_COMMAND=

set_command() {
    if [ "${ARG_COMMAND:-}" == "" ]; then
        ARG_COMMAND="${1}"
    else
        echo "Conflicting commands: \"${ARG_COMMAND}\" and \"${1}\"" >&2
        show_usage
        exit 1
    fi
}

parse_commandline() {
    while [ "${#}" -gt "0" ]; do
        case "${1}" in
            c|con|connect)
                set_command connect
            ;;
            d|dis|disconnect)
                set_command disconnect
            ;;
            -r|--rescan)
                ARG_RESCAN="true"
            ;;
            -h|--help)
                ARG_HELP="true"
            ;;
            --)
                shift
                ARG_QUERY="${*}"
                return 0
            ;;
            *)
                echo "Unrecognized argument: ${1}" >&2
                show_usage
                exit 1
            ;;
        esac
        shift
    done
}

parse_commandline "${@}"

if [ "${ARG_HELP:-}" == "true" ]; then
    show_usage
    exit 0
fi

command:connect() {
    # Display a colorful list of available wifi networks and allow the user to interactively select one

    local nmcli_args=(--colors yes --fields "BSSID,SSID,BARS,IN-USE" device wifi list)

    if [ "${ARG_RESCAN:-}" == "true" ]; then
        nmcli_args+=(--rescan yes)
    fi

    local state_dir="${XDG_STATE_HOME:-${HOME}/.local/state}/wlan"
    mkdir --parent "${state_dir}"

    local fzf_args=(
        --header-lines 1
        --ansi
        --history "${state_dir}/history"
        --history-size 20
        --bind ctrl-j:previous-history
        --bind ctrl-k:next-history
        --height 15
        --layout reverse
    )

    if [ "${ARG_QUERY:-}" != "" ]; then
        fzf_args+=(--query "${ARG_QUERY}" --select-1)
    fi

    local bssid
    bssid="$(nmcli "${nmcli_args[@]}" \
        | fzf "${fzf_args[@]}" \
        | cut --fields 1 --delimiter " ")"

    echo "Connecting to BSSID ${bssid}..." >&2

    nmcli device wifi connect "${bssid}"
}

command:disconnect() {
    # Get all connected `wifi` interfaces from `nmcli device status`, and disconnect each one.
    # Only tested with a single interface though :-/

    for interface in $(nmcli --terse device status | awk -F ":" '$2 == "wifi" && $3 == "connected" { print $1 }')
    do
        nmcli device disconnect "${interface}"
    done
}

main() {
    "command:${ARG_COMMAND:-connect}"
}

main
