#!/usr/bin/env bash
set -Eeuo pipefail

SCRIPT_NAME="$(basename "${0}")"
readonly SCRIPT_NAME

NMCLI="${WLAN_NMCLI:-nmcli}"
readonly NMCLI

FZF="${WLAN_FZF:-fzf}"
readonly FZF

help:general() {
    echo "
Connect to wireless networks with minimal keystrokes.

Usage:
    ${SCRIPT_NAME} [command] [options]

Available Commands:
    c[onnect]        Connect to a network (default)
    d[isconnect]     Disconnect from a network
    off              Turn off your WiFi adapter
    on               Turn on your WiFi adapter

Available Options:
    -h, --help       Show this message

For command-specific help, run \`${SCRIPT_NAME} COMMAND --help\`
"
}

help:connect() {
    echo "
Connect to a wireless network.

Usage:
    ${SCRIPT_NAME} connect [options] [-- initial query]

Available Options:
    -r, --rescan     Force network rescan
    -h, --help       Show this message
"
}

help:disconnect() {
    echo "
Disconnect from a wireless network.

Usage:
    ${SCRIPT_NAME} disconnect
"
}

help:off() {
    echo "
Turn your wireless radio off.

Usage:
    ${SCRIPT_NAME} off
"
}

help:on() {
    echo "
Turn your wireless radio on.

Usage:
    ${SCRIPT_NAME} on
"
}

parse_cli_args() {
    ARG_COMMAND=connect
    ARG_COMMAND_IMPLICIT="true"

    if [ "${#}" -eq 0 ]; then
        return 0
    fi

    case "${1}" in
        c|con|connect)
            ARG_COMMAND=connect
            ARG_COMMAND_IMPLICIT="false"
            shift
        ;;
        d|dis|disconnect)
            ARG_COMMAND=disconnect
            shift
        ;;
        off)
            ARG_COMMAND=off
            shift
        ;;
        on)
            ARG_COMMAND=on
            shift
        ;;
        -h|--help|help)
            ARG_HELP="general"
            return 0
        ;;
        *)
            ARG_COMMAND=connect
        ;;
    esac

    "parse:${ARG_COMMAND}" "${@}"
}

on_unrecognized_argument() {
    echo "Unrecognized argument: \"${1}\"" >&2
    "help:${ARG_HELP:-${ARG_COMMAND}}" >&2
}

parse:connect() {
    while [ "${#}" -gt "0" ]; do
        case "${1}" in
            -r|--rescan)
                ARG_RESCAN="true"
                shift
            ;;
            -h|--help)
                ARG_HELP="${ARG_COMMAND}"
                return 0
            ;;
            --)
                shift
                ARG_QUERY="${*}"
                return 0
            ;;
            *)
                if [ "${ARG_COMMAND_IMPLICIT:-}" == "true" ]; then
                    # `connect` is the default command, so the user didn't type that
                    # in. They need to see general help, not `connect` help.
                    ARG_HELP=general
                fi
                on_unrecognized_argument "${@}"
                exit 1
            ;;
        esac
    done
}

parse:disconnect() {
    while [ "${#}" -gt "0" ]; do
        case "${1}" in
            -h|--help)
                ARG_HELP="${ARG_COMMAND}"
                return 0
            ;;
            *)
                on_unrecognized_argument "${@}"
                exit 1
            ;;
        esac
    done
}

parse:off() {
    while [ "${#}" -gt "0" ]; do
        case "${1}" in
            -h|--help)
                ARG_HELP="${ARG_COMMAND}"
                return 0
            ;;
            *)
                on_unrecognized_argument "${@}"
                exit 1
            ;;
        esac
    done
}

parse:on() {
    while [ "${#}" -gt "0" ]; do
        case "${1}" in
            -h|--help)
                ARG_HELP="${ARG_COMMAND}"
                return 0
            ;;
            *)
                on_unrecognized_argument "${@}"
                exit 1
            ;;
        esac
    done
}

command:connect() {
    # Display a colorful list of available wifi networks and allow the user to interactively select one

    local nmcli_args=(--colors yes --fields "BSSID,SSID,BARS,CHAN,FREQ,IN-USE" device wifi list)

    local nmcli_rescan=()
    if [ "${ARG_RESCAN:-}" == "true" ]; then
        nmcli_rescan+=(--rescan yes)
    fi

    local state_dir="${XDG_STATE_HOME:-${HOME}/.local/state}/wlan"
    mkdir --parent "${state_dir}"

    local fzf_args=(
        --header-lines 1
        --ansi
        --history "${state_dir}/history"
        --history-size 20
        --bind ctrl-j:previous-history
        --bind ctrl-k:next-history
        --bind "ctrl-r:reload(${NMCLI} ${nmcli_args[*]} --rescan yes || true;)"
        --height 15
        --layout reverse
    )

    if [ "${ARG_QUERY:-}" != "" ]; then
        fzf_args+=(--query "${ARG_QUERY}" --select-1 --exit-0)
    fi

    local bssid
    bssid="$("${NMCLI}" "${nmcli_args[@]}" "${nmcli_rescan[@]}" \
        | SHELL="sh" "${FZF}" "${fzf_args[@]}" \
        | cut --fields 1 --delimiter " ")"

    echo "Connecting to BSSID ${bssid}..." >&2

    "${NMCLI}" device wifi connect "${bssid}"
}

command:disconnect() {
    # Get all connected `wifi` interfaces from `nmcli device status`, and disconnect each one.

    for interface in $("${NMCLI}" --terse device status | awk -F ":" '$2 == "wifi" && $3 == "connected" { print $1 }')
    do
        "${NMCLI}" device disconnect "${interface}"
    done
}

command:off() {
    "${NMCLI}" radio wifi off
}

command:on() {
    "${NMCLI}" radio wifi on
}

main() {
    if [ "${ARG_HELP:-}" != "" ]; then
        "help:${ARG_HELP}"
        exit 0
    fi
    "command:${ARG_COMMAND:-connect}"
}

parse_cli_args "${@}"
main
